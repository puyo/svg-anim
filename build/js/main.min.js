(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
(function () {
'use strict';

function __$styleInject(css, returnValue) {
  if (typeof document === 'undefined') {
    return returnValue;
  }
  css = css || '';
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  head.appendChild(style);
  
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
  return returnValue;
}

const game = new Phaser.Game(800, 600, Phaser.AUTO, "phaser-example", {
    preload: preload,
    create: create,
    update: update,
    render: render
});
function preload() {
    game.load.image("bullet", "assets/bullet.png");
    game.load.image("enemyBullet", "assets/enemy-bullet.png");
    game.load.spritesheet("invader", "assets/invader32x32x4.png", 32, 32);
    game.load.image("ship", "assets/player.png");
    game.load.spritesheet("kaboom", "assets/explode.png", 128, 128);
    game.load.image("starfield", "assets/starfield.png");
    game.load.image("background", "assets/background2.png");
}
let player;
let aliens;
let bullets;
let bulletTime = 0;
let cursors;
let fireButton;
let explosions;
let starfield;
let score = 0;
let scoreString = "";
let scoreText;
let lives;
let enemyBullets;
let firingTimer = 0;
let stateText;
let livingEnemies = [];
function create() {
    game.physics.startSystem(Phaser.Physics.ARCADE);
    starfield = game.add.tileSprite(0, 0, 800, 600, "starfield");
    bullets = game.add.group();
    bullets.enableBody = true;
    bullets.physicsBodyType = Phaser.Physics.ARCADE;
    bullets.createMultiple(30, "bullet");
    bullets.setAll("anchor.x", 0.5);
    bullets.setAll("anchor.y", 1);
    bullets.setAll("outOfBoundsKill", true);
    bullets.setAll("checkWorldBounds", true);
    enemyBullets = game.add.group();
    enemyBullets.enableBody = true;
    enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;
    enemyBullets.createMultiple(30, "enemyBullet");
    enemyBullets.setAll("anchor.x", 0.5);
    enemyBullets.setAll("anchor.y", 1);
    enemyBullets.setAll("outOfBoundsKill", true);
    enemyBullets.setAll("checkWorldBounds", true);
    player = game.add.sprite(400, 500, "ship");
    player.anchor.setTo(0.5, 0.5);
    game.physics.enable(player, Phaser.Physics.ARCADE);
    aliens = game.add.group();
    aliens.enableBody = true;
    aliens.physicsBodyType = Phaser.Physics.ARCADE;
    createAliens();
    scoreString = "Score : ";
    scoreText = game.add.text(10, 10, scoreString + String(score), {
        font: "34px Arial",
        fill: "#fff"
    });
    lives = game.add.group();
    game.add.text(game.world.width - 100, 10, "Lives : ", {
        font: "34px Arial",
        fill: "#fff"
    });
    stateText = game.add.text(game.world.centerX, game.world.centerY, " ", {
        font: "84px Arial",
        fill: "#fff"
    });
    stateText.anchor.setTo(0.5, 0.5);
    stateText.visible = false;
    for (var i = 0; i < 3; i++) {
        var ship = lives.create(game.world.width - 100 + 30 * i, 60, "ship");
        ship.anchor.setTo(0.5, 0.5);
        ship.angle = 90;
        ship.alpha = 0.4;
    }
    explosions = game.add.group();
    explosions.createMultiple(30, "kaboom");
    explosions.forEach(setupInvader, this);
    cursors = game.input.keyboard.createCursorKeys();
    fireButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
}
function createAliens() {
    for (var y = 0; y < 4; y++) {
        for (var x = 0; x < 10; x++) {
            var alien = aliens.create(x * 48, y * 50, "invader");
            alien.anchor.setTo(0.5, 0.5);
            alien.animations.add("fly", [0, 1, 2, 3], 20, true);
            alien.play("fly");
            alien.body.moves = false;
        }
    }
    aliens.x = 100;
    aliens.y = 50;
    var tween = game.add
        .tween(aliens)
        .to({ x: 200 }, 2000, Phaser.Easing.Linear.None, true, 0, 1000, true);
    tween.onLoop.add(descend, this);
}
function setupInvader(invader) {
    invader.anchor.x = 0.5;
    invader.anchor.y = 0.5;
    invader.animations.add("kaboom");
}
function descend() {
    aliens.y += 10;
}
function update() {
    starfield.tilePosition.y += 2;
    if (player.alive) {
        player.body.velocity.setTo(0, 0);
        if (cursors.left.isDown) {
            player.body.velocity.x = -200;
        }
        else if (cursors.right.isDown) {
            player.body.velocity.x = 200;
        }
        if (fireButton.isDown) {
            fireBullet();
        }
        if (game.time.now > firingTimer) {
            enemyFires();
        }
        game.physics.arcade.overlap(bullets, aliens, collisionHandler, null, this);
        game.physics.arcade.overlap(enemyBullets, player, enemyHitsPlayer, null, this);
    }
}
function render() {
}
function collisionHandler(bullet, alien) {
    bullet.kill();
    alien.kill();
    score += 20;
    scoreText.text = scoreString + String(score);
    var explosion = explosions.getFirstExists(false);
    explosion.reset(alien.body.x, alien.body.y);
    explosion.play("kaboom", 30, false, true);
    if (aliens.countLiving() == 0) {
        score += 1000;
        scoreText.text = scoreString + String(score);
        enemyBullets.callAll("kill", this);
        stateText.text = " You Won, \n Click to restart";
        stateText.visible = true;
        game.input.onTap.addOnce(restart, this);
    }
}
function enemyHitsPlayer(player, bullet) {
    bullet.kill();
    const live = lives.getFirstAlive();
    if (live) {
        live.kill();
    }
    var explosion = explosions.getFirstExists(false);
    explosion.reset(player.body.x, player.body.y);
    explosion.play("kaboom", 30, false, true);
    if (lives.countLiving() < 1) {
        player.kill();
        enemyBullets.callAll("kill", this);
        stateText.text = " GAME OVER \n Click to restart";
        stateText.visible = true;
        game.input.onTap.addOnce(restart, this);
    }
}
function enemyFires() {
    const enemyBullet = enemyBullets.getFirstExists(false);
    livingEnemies.length = 0;
    aliens.forEachAlive(function (alien) {
        livingEnemies.push(alien);
    }, this);
    if (enemyBullet && livingEnemies.length > 0) {
        var random = game.rnd.integerInRange(0, livingEnemies.length - 1);
        var shooter = livingEnemies[random];
        enemyBullet.reset(shooter.body.x, shooter.body.y);
        game.physics.arcade.moveToObject(enemyBullet, player, 120);
        firingTimer = game.time.now + 2000;
    }
}
function fireBullet() {
    if (game.time.now > bulletTime) {
        const bullet = bullets.getFirstExists(false);
        if (bullet) {
            bullet.reset(player.x, player.y + 8);
            bullet.body.velocity.y = -400;
            bulletTime = game.time.now + 200;
        }
    }
}
function restart() {
    lives.callAll("revive", this);
    aliens.removeAll();
    createAliens();
    player.revive();
    stateText.visible = false;
}

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGdhbWUgPSBuZXcgUGhhc2VyLkdhbWUoODAwLCA2MDAsIFBoYXNlci5BVVRPLCBcInBoYXNlci1leGFtcGxlXCIsIHtcbiAgcHJlbG9hZDogcHJlbG9hZCxcbiAgY3JlYXRlOiBjcmVhdGUsXG4gIHVwZGF0ZTogdXBkYXRlLFxuICByZW5kZXI6IHJlbmRlclxufSlcblxuZnVuY3Rpb24gcHJlbG9hZCgpIHtcbiAgZ2FtZS5sb2FkLmltYWdlKFwiYnVsbGV0XCIsIFwiYXNzZXRzL2J1bGxldC5wbmdcIilcbiAgZ2FtZS5sb2FkLmltYWdlKFwiZW5lbXlCdWxsZXRcIiwgXCJhc3NldHMvZW5lbXktYnVsbGV0LnBuZ1wiKVxuICBnYW1lLmxvYWQuc3ByaXRlc2hlZXQoXG4gICAgXCJpbnZhZGVyXCIsXG4gICAgXCJhc3NldHMvaW52YWRlcjMyeDMyeDQucG5nXCIsXG4gICAgMzIsXG4gICAgMzJcbiAgKVxuICBnYW1lLmxvYWQuaW1hZ2UoXCJzaGlwXCIsIFwiYXNzZXRzL3BsYXllci5wbmdcIilcbiAgZ2FtZS5sb2FkLnNwcml0ZXNoZWV0KFxuICAgIFwia2Fib29tXCIsXG4gICAgXCJhc3NldHMvZXhwbG9kZS5wbmdcIixcbiAgICAxMjgsXG4gICAgMTI4XG4gIClcbiAgZ2FtZS5sb2FkLmltYWdlKFwic3RhcmZpZWxkXCIsIFwiYXNzZXRzL3N0YXJmaWVsZC5wbmdcIilcbiAgZ2FtZS5sb2FkLmltYWdlKFwiYmFja2dyb3VuZFwiLCBcImFzc2V0cy9iYWNrZ3JvdW5kMi5wbmdcIilcbn1cblxubGV0IHBsYXllcjogUGhhc2VyLlNwcml0ZVxubGV0IGFsaWVuczogUGhhc2VyLkdyb3VwXG5sZXQgYnVsbGV0czogUGhhc2VyLkdyb3VwXG5sZXQgYnVsbGV0VGltZSA9IDBcbmxldCBjdXJzb3JzOiBQaGFzZXIuQ3Vyc29yS2V5c1xubGV0IGZpcmVCdXR0b246IFBoYXNlci5LZXlcbmxldCBleHBsb3Npb25zOiBQaGFzZXIuR3JvdXBcbmxldCBzdGFyZmllbGQ6IFBoYXNlci5UaWxlU3ByaXRlXG5sZXQgc2NvcmUgPSAwXG5sZXQgc2NvcmVTdHJpbmc6IFN0cmluZyA9IFwiXCJcbmxldCBzY29yZVRleHQ6IFBoYXNlci5UZXh0XG5sZXQgbGl2ZXM6IFBoYXNlci5Hcm91cFxubGV0IGVuZW15QnVsbGV0czogUGhhc2VyLkdyb3VwXG5sZXQgZmlyaW5nVGltZXIgPSAwXG5sZXQgc3RhdGVUZXh0OiBQaGFzZXIuVGV4dFxubGV0IGxpdmluZ0VuZW1pZXM6IEFycmF5PGFueT4gPSBbXVxuXG5mdW5jdGlvbiBjcmVhdGUoKSB7XG4gIGdhbWUucGh5c2ljcy5zdGFydFN5c3RlbShQaGFzZXIuUGh5c2ljcy5BUkNBREUpXG5cbiAgLy8gIFRoZSBzY3JvbGxpbmcgc3RhcmZpZWxkIGJhY2tncm91bmRcbiAgc3RhcmZpZWxkID0gZ2FtZS5hZGQudGlsZVNwcml0ZSgwLCAwLCA4MDAsIDYwMCwgXCJzdGFyZmllbGRcIilcblxuICAvLyAgT3VyIGJ1bGxldCBncm91cFxuICBidWxsZXRzID0gZ2FtZS5hZGQuZ3JvdXAoKVxuICBidWxsZXRzLmVuYWJsZUJvZHkgPSB0cnVlXG4gIGJ1bGxldHMucGh5c2ljc0JvZHlUeXBlID0gUGhhc2VyLlBoeXNpY3MuQVJDQURFXG4gIGJ1bGxldHMuY3JlYXRlTXVsdGlwbGUoMzAsIFwiYnVsbGV0XCIpXG4gIGJ1bGxldHMuc2V0QWxsKFwiYW5jaG9yLnhcIiwgMC41KVxuICBidWxsZXRzLnNldEFsbChcImFuY2hvci55XCIsIDEpXG4gIGJ1bGxldHMuc2V0QWxsKFwib3V0T2ZCb3VuZHNLaWxsXCIsIHRydWUpXG4gIGJ1bGxldHMuc2V0QWxsKFwiY2hlY2tXb3JsZEJvdW5kc1wiLCB0cnVlKVxuXG4gIC8vIFRoZSBlbmVteSdzIGJ1bGxldHNcbiAgZW5lbXlCdWxsZXRzID0gZ2FtZS5hZGQuZ3JvdXAoKVxuICBlbmVteUJ1bGxldHMuZW5hYmxlQm9keSA9IHRydWVcbiAgZW5lbXlCdWxsZXRzLnBoeXNpY3NCb2R5VHlwZSA9IFBoYXNlci5QaHlzaWNzLkFSQ0FERVxuICBlbmVteUJ1bGxldHMuY3JlYXRlTXVsdGlwbGUoMzAsIFwiZW5lbXlCdWxsZXRcIilcbiAgZW5lbXlCdWxsZXRzLnNldEFsbChcImFuY2hvci54XCIsIDAuNSlcbiAgZW5lbXlCdWxsZXRzLnNldEFsbChcImFuY2hvci55XCIsIDEpXG4gIGVuZW15QnVsbGV0cy5zZXRBbGwoXCJvdXRPZkJvdW5kc0tpbGxcIiwgdHJ1ZSlcbiAgZW5lbXlCdWxsZXRzLnNldEFsbChcImNoZWNrV29ybGRCb3VuZHNcIiwgdHJ1ZSlcblxuICAvLyAgVGhlIGhlcm8hXG4gIHBsYXllciA9IGdhbWUuYWRkLnNwcml0ZSg0MDAsIDUwMCwgXCJzaGlwXCIpXG4gIHBsYXllci5hbmNob3Iuc2V0VG8oMC41LCAwLjUpXG4gIGdhbWUucGh5c2ljcy5lbmFibGUocGxheWVyLCBQaGFzZXIuUGh5c2ljcy5BUkNBREUpXG5cbiAgLy8gIFRoZSBiYWRkaWVzIVxuICBhbGllbnMgPSBnYW1lLmFkZC5ncm91cCgpXG4gIGFsaWVucy5lbmFibGVCb2R5ID0gdHJ1ZVxuICBhbGllbnMucGh5c2ljc0JvZHlUeXBlID0gUGhhc2VyLlBoeXNpY3MuQVJDQURFXG5cbiAgY3JlYXRlQWxpZW5zKClcblxuICAvLyAgVGhlIHNjb3JlXG4gIHNjb3JlU3RyaW5nID0gXCJTY29yZSA6IFwiXG4gIHNjb3JlVGV4dCA9IGdhbWUuYWRkLnRleHQoMTAsIDEwLCBzY29yZVN0cmluZyArIFN0cmluZyhzY29yZSksIHtcbiAgICBmb250OiBcIjM0cHggQXJpYWxcIixcbiAgICBmaWxsOiBcIiNmZmZcIlxuICB9KVxuXG4gIC8vICBMaXZlc1xuICBsaXZlcyA9IGdhbWUuYWRkLmdyb3VwKClcbiAgZ2FtZS5hZGQudGV4dChnYW1lLndvcmxkLndpZHRoIC0gMTAwLCAxMCwgXCJMaXZlcyA6IFwiLCB7XG4gICAgZm9udDogXCIzNHB4IEFyaWFsXCIsXG4gICAgZmlsbDogXCIjZmZmXCJcbiAgfSlcblxuICAvLyAgVGV4dFxuICBzdGF0ZVRleHQgPSBnYW1lLmFkZC50ZXh0KGdhbWUud29ybGQuY2VudGVyWCwgZ2FtZS53b3JsZC5jZW50ZXJZLCBcIiBcIiwge1xuICAgIGZvbnQ6IFwiODRweCBBcmlhbFwiLFxuICAgIGZpbGw6IFwiI2ZmZlwiXG4gIH0pXG4gIHN0YXRlVGV4dC5hbmNob3Iuc2V0VG8oMC41LCAwLjUpXG4gIHN0YXRlVGV4dC52aXNpYmxlID0gZmFsc2VcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIHZhciBzaGlwID0gbGl2ZXMuY3JlYXRlKGdhbWUud29ybGQud2lkdGggLSAxMDAgKyAzMCAqIGksIDYwLCBcInNoaXBcIilcbiAgICBzaGlwLmFuY2hvci5zZXRUbygwLjUsIDAuNSlcbiAgICBzaGlwLmFuZ2xlID0gOTBcbiAgICBzaGlwLmFscGhhID0gMC40XG4gIH1cblxuICAvLyAgQW4gZXhwbG9zaW9uIHBvb2xcbiAgZXhwbG9zaW9ucyA9IGdhbWUuYWRkLmdyb3VwKClcbiAgZXhwbG9zaW9ucy5jcmVhdGVNdWx0aXBsZSgzMCwgXCJrYWJvb21cIilcbiAgZXhwbG9zaW9ucy5mb3JFYWNoKHNldHVwSW52YWRlciwgdGhpcylcblxuICAvLyAgQW5kIHNvbWUgY29udHJvbHMgdG8gcGxheSB0aGUgZ2FtZSB3aXRoXG4gIGN1cnNvcnMgPSBnYW1lLmlucHV0LmtleWJvYXJkLmNyZWF0ZUN1cnNvcktleXMoKVxuICBmaXJlQnV0dG9uID0gZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlNQQUNFQkFSKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVBbGllbnMoKSB7XG4gIGZvciAodmFyIHkgPSAwOyB5IDwgNDsgeSsrKSB7XG4gICAgZm9yICh2YXIgeCA9IDA7IHggPCAxMDsgeCsrKSB7XG4gICAgICB2YXIgYWxpZW4gPSBhbGllbnMuY3JlYXRlKHggKiA0OCwgeSAqIDUwLCBcImludmFkZXJcIilcbiAgICAgIGFsaWVuLmFuY2hvci5zZXRUbygwLjUsIDAuNSlcbiAgICAgIGFsaWVuLmFuaW1hdGlvbnMuYWRkKFwiZmx5XCIsIFswLCAxLCAyLCAzXSwgMjAsIHRydWUpXG4gICAgICBhbGllbi5wbGF5KFwiZmx5XCIpXG4gICAgICBhbGllbi5ib2R5Lm1vdmVzID0gZmFsc2VcbiAgICB9XG4gIH1cblxuICBhbGllbnMueCA9IDEwMFxuICBhbGllbnMueSA9IDUwXG5cbiAgLy8gIEFsbCB0aGlzIGRvZXMgaXMgYmFzaWNhbGx5IHN0YXJ0IHRoZSBpbnZhZGVycyBtb3ZpbmcuIE5vdGljZSB3ZSdyZSBtb3ZpbmcgdGhlIEdyb3VwIHRoZXkgYmVsb25nIHRvLCByYXRoZXIgdGhhbiB0aGUgaW52YWRlcnMgZGlyZWN0bHkuXG4gIHZhciB0d2VlbiA9IGdhbWUuYWRkXG4gICAgLnR3ZWVuKGFsaWVucylcbiAgICAudG8oeyB4OiAyMDAgfSwgMjAwMCwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSwgMCwgMTAwMCwgdHJ1ZSlcblxuICAvLyAgV2hlbiB0aGUgdHdlZW4gbG9vcHMgaXQgY2FsbHMgZGVzY2VuZFxuICB0d2Vlbi5vbkxvb3AuYWRkKGRlc2NlbmQsIHRoaXMpXG59XG5cbmZ1bmN0aW9uIHNldHVwSW52YWRlcihpbnZhZGVyOiBQaGFzZXIuU3ByaXRlKSB7XG4gIGludmFkZXIuYW5jaG9yLnggPSAwLjVcbiAgaW52YWRlci5hbmNob3IueSA9IDAuNVxuICBpbnZhZGVyLmFuaW1hdGlvbnMuYWRkKFwia2Fib29tXCIpXG59XG5cbmZ1bmN0aW9uIGRlc2NlbmQoKSB7XG4gIGFsaWVucy55ICs9IDEwXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgLy8gIFNjcm9sbCB0aGUgYmFja2dyb3VuZFxuICBzdGFyZmllbGQudGlsZVBvc2l0aW9uLnkgKz0gMlxuXG4gIGlmIChwbGF5ZXIuYWxpdmUpIHtcbiAgICAvLyAgUmVzZXQgdGhlIHBsYXllciwgdGhlbiBjaGVjayBmb3IgbW92ZW1lbnQga2V5c1xuICAgIHBsYXllci5ib2R5LnZlbG9jaXR5LnNldFRvKDAsIDApXG5cbiAgICBpZiAoY3Vyc29ycy5sZWZ0LmlzRG93bikge1xuICAgICAgcGxheWVyLmJvZHkudmVsb2NpdHkueCA9IC0yMDBcbiAgICB9IGVsc2UgaWYgKGN1cnNvcnMucmlnaHQuaXNEb3duKSB7XG4gICAgICBwbGF5ZXIuYm9keS52ZWxvY2l0eS54ID0gMjAwXG4gICAgfVxuXG4gICAgLy8gIEZpcmluZz9cbiAgICBpZiAoZmlyZUJ1dHRvbi5pc0Rvd24pIHtcbiAgICAgIGZpcmVCdWxsZXQoKVxuICAgIH1cblxuICAgIGlmIChnYW1lLnRpbWUubm93ID4gZmlyaW5nVGltZXIpIHtcbiAgICAgIGVuZW15RmlyZXMoKVxuICAgIH1cblxuICAgIC8vICBSdW4gY29sbGlzaW9uXG4gICAgZ2FtZS5waHlzaWNzLmFyY2FkZS5vdmVybGFwKGJ1bGxldHMsIGFsaWVucywgY29sbGlzaW9uSGFuZGxlciwgbnVsbCwgdGhpcylcbiAgICBnYW1lLnBoeXNpY3MuYXJjYWRlLm92ZXJsYXAoXG4gICAgICBlbmVteUJ1bGxldHMsXG4gICAgICBwbGF5ZXIsXG4gICAgICBlbmVteUhpdHNQbGF5ZXIsXG4gICAgICBudWxsLFxuICAgICAgdGhpc1xuICAgIClcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXIoKSB7XG4gIC8vIGZvciAodmFyIGkgPSAwIGkgPCBhbGllbnMubGVuZ3RoIGkrKylcbiAgLy8ge1xuICAvLyAgICAgZ2FtZS5kZWJ1Zy5ib2R5KGFsaWVucy5jaGlsZHJlbltpXSlcbiAgLy8gfVxufVxuXG5mdW5jdGlvbiBjb2xsaXNpb25IYW5kbGVyKGJ1bGxldDogUGhhc2VyLlNwcml0ZSwgYWxpZW46IFBoYXNlci5TcHJpdGUpIHtcbiAgLy8gIFdoZW4gYSBidWxsZXQgaGl0cyBhbiBhbGllbiB3ZSBraWxsIHRoZW0gYm90aFxuICBidWxsZXQua2lsbCgpXG4gIGFsaWVuLmtpbGwoKVxuXG4gIC8vICBJbmNyZWFzZSB0aGUgc2NvcmVcbiAgc2NvcmUgKz0gMjBcbiAgc2NvcmVUZXh0LnRleHQgPSBzY29yZVN0cmluZyArIFN0cmluZyhzY29yZSlcblxuICAvLyAgQW5kIGNyZWF0ZSBhbiBleHBsb3Npb24gOilcbiAgdmFyIGV4cGxvc2lvbiA9IGV4cGxvc2lvbnMuZ2V0Rmlyc3RFeGlzdHMoZmFsc2UpXG4gIGV4cGxvc2lvbi5yZXNldChhbGllbi5ib2R5LngsIGFsaWVuLmJvZHkueSlcbiAgZXhwbG9zaW9uLnBsYXkoXCJrYWJvb21cIiwgMzAsIGZhbHNlLCB0cnVlKVxuXG4gIGlmIChhbGllbnMuY291bnRMaXZpbmcoKSA9PSAwKSB7XG4gICAgc2NvcmUgKz0gMTAwMFxuICAgIHNjb3JlVGV4dC50ZXh0ID0gc2NvcmVTdHJpbmcgKyBTdHJpbmcoc2NvcmUpXG5cbiAgICBlbmVteUJ1bGxldHMuY2FsbEFsbChcImtpbGxcIiwgdGhpcylcbiAgICBzdGF0ZVRleHQudGV4dCA9IFwiIFlvdSBXb24sIFxcbiBDbGljayB0byByZXN0YXJ0XCJcbiAgICBzdGF0ZVRleHQudmlzaWJsZSA9IHRydWVcblxuICAgIC8vdGhlIFwiY2xpY2sgdG8gcmVzdGFydFwiIGhhbmRsZXJcbiAgICBnYW1lLmlucHV0Lm9uVGFwLmFkZE9uY2UocmVzdGFydCwgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmVteUhpdHNQbGF5ZXIocGxheWVyIDogUGhhc2VyLlNwcml0ZSwgYnVsbGV0IDogUGhhc2VyLlNwcml0ZSkge1xuICBidWxsZXQua2lsbCgpXG4gIGNvbnN0IGxpdmUgOiBQaGFzZXIuU3ByaXRlID0gbGl2ZXMuZ2V0Rmlyc3RBbGl2ZSgpXG5cbiAgaWYgKGxpdmUpIHtcbiAgICBsaXZlLmtpbGwoKVxuICB9XG5cbiAgLy8gIEFuZCBjcmVhdGUgYW4gZXhwbG9zaW9uIDopXG4gIHZhciBleHBsb3Npb24gPSBleHBsb3Npb25zLmdldEZpcnN0RXhpc3RzKGZhbHNlKVxuICBleHBsb3Npb24ucmVzZXQocGxheWVyLmJvZHkueCwgcGxheWVyLmJvZHkueSlcbiAgZXhwbG9zaW9uLnBsYXkoXCJrYWJvb21cIiwgMzAsIGZhbHNlLCB0cnVlKVxuXG4gIC8vIFdoZW4gdGhlIHBsYXllciBkaWVzXG4gIGlmIChsaXZlcy5jb3VudExpdmluZygpIDwgMSkge1xuICAgIHBsYXllci5raWxsKClcbiAgICBlbmVteUJ1bGxldHMuY2FsbEFsbChcImtpbGxcIiwgdGhpcylcblxuICAgIHN0YXRlVGV4dC50ZXh0ID0gXCIgR0FNRSBPVkVSIFxcbiBDbGljayB0byByZXN0YXJ0XCJcbiAgICBzdGF0ZVRleHQudmlzaWJsZSA9IHRydWVcblxuICAgIC8vdGhlIFwiY2xpY2sgdG8gcmVzdGFydFwiIGhhbmRsZXJcbiAgICBnYW1lLmlucHV0Lm9uVGFwLmFkZE9uY2UocmVzdGFydCwgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmVteUZpcmVzKCkge1xuICAvLyAgR3JhYiB0aGUgZmlyc3QgYnVsbGV0IHdlIGNhbiBmcm9tIHRoZSBwb29sXG4gIGNvbnN0IGVuZW15QnVsbGV0IDogUGhhc2VyLlNwcml0ZSA9IGVuZW15QnVsbGV0cy5nZXRGaXJzdEV4aXN0cyhmYWxzZSlcbiAgbGl2aW5nRW5lbWllcy5sZW5ndGggPSAwXG5cbiAgYWxpZW5zLmZvckVhY2hBbGl2ZShmdW5jdGlvbihhbGllbiA6IFBoYXNlci5TcHJpdGUpIHtcbiAgICAvLyBwdXQgZXZlcnkgbGl2aW5nIGVuZW15IGluIGFuIGFycmF5XG4gICAgbGl2aW5nRW5lbWllcy5wdXNoKGFsaWVuKVxuICB9LCB0aGlzKVxuXG4gIGlmIChlbmVteUJ1bGxldCAmJiBsaXZpbmdFbmVtaWVzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgcmFuZG9tID0gZ2FtZS5ybmQuaW50ZWdlckluUmFuZ2UoMCwgbGl2aW5nRW5lbWllcy5sZW5ndGggLSAxKVxuXG4gICAgLy8gcmFuZG9tbHkgc2VsZWN0IG9uZSBvZiB0aGVtXG4gICAgdmFyIHNob290ZXIgPSBsaXZpbmdFbmVtaWVzW3JhbmRvbV1cbiAgICAvLyBBbmQgZmlyZSB0aGUgYnVsbGV0IGZyb20gdGhpcyBlbmVteVxuICAgIGVuZW15QnVsbGV0LnJlc2V0KHNob290ZXIuYm9keS54LCBzaG9vdGVyLmJvZHkueSlcblxuICAgIGdhbWUucGh5c2ljcy5hcmNhZGUubW92ZVRvT2JqZWN0KGVuZW15QnVsbGV0LCBwbGF5ZXIsIDEyMClcbiAgICBmaXJpbmdUaW1lciA9IGdhbWUudGltZS5ub3cgKyAyMDAwXG4gIH1cbn1cblxuZnVuY3Rpb24gZmlyZUJ1bGxldCgpIHtcbiAgLy8gIFRvIGF2b2lkIHRoZW0gYmVpbmcgYWxsb3dlZCB0byBmaXJlIHRvbyBmYXN0IHdlIHNldCBhIHRpbWUgbGltaXRcbiAgaWYgKGdhbWUudGltZS5ub3cgPiBidWxsZXRUaW1lKSB7XG4gICAgLy8gIEdyYWIgdGhlIGZpcnN0IGJ1bGxldCB3ZSBjYW4gZnJvbSB0aGUgcG9vbFxuICAgIGNvbnN0IGJ1bGxldCA6IFBoYXNlci5TcHJpdGUgPSBidWxsZXRzLmdldEZpcnN0RXhpc3RzKGZhbHNlKVxuXG4gICAgaWYgKGJ1bGxldCkge1xuICAgICAgLy8gIEFuZCBmaXJlIGl0XG4gICAgICBidWxsZXQucmVzZXQocGxheWVyLngsIHBsYXllci55ICsgOClcbiAgICAgIGJ1bGxldC5ib2R5LnZlbG9jaXR5LnkgPSAtNDAwXG4gICAgICBidWxsZXRUaW1lID0gZ2FtZS50aW1lLm5vdyArIDIwMFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNldEJ1bGxldChidWxsZXQgOiBQaGFzZXIuU3ByaXRlKSB7XG4gIC8vICBDYWxsZWQgaWYgdGhlIGJ1bGxldCBnb2VzIG91dCBvZiB0aGUgc2NyZWVuXG4gIGJ1bGxldC5raWxsKClcbn1cblxuZnVuY3Rpb24gcmVzdGFydCgpIHtcbiAgLy8gIEEgbmV3IGxldmVsIHN0YXJ0c1xuICAvL3Jlc2V0cyB0aGUgbGlmZSBjb3VudFxuICBsaXZlcy5jYWxsQWxsKFwicmV2aXZlXCIsIHRoaXMpXG4gIC8vICBBbmQgYnJpbmdzIHRoZSBhbGllbnMgYmFjayBmcm9tIHRoZSBkZWFkIDopXG4gIGFsaWVucy5yZW1vdmVBbGwoKVxuICBjcmVhdGVBbGllbnMoKVxuXG4gIC8vcmV2aXZlcyB0aGUgcGxheWVyXG4gIHBsYXllci5yZXZpdmUoKVxuICAvL2hpZGVzIHRoZSB0ZXh0XG4gIHN0YXRlVGV4dC52aXNpYmxlID0gZmFsc2Vcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsTUFBTSxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtJQUNwRSxPQUFPLEVBQUUsT0FBTztJQUNoQixNQUFNLEVBQUUsTUFBTTtJQUNkLE1BQU0sRUFBRSxNQUFNO0lBQ2QsTUFBTSxFQUFFLE1BQU07Q0FDZixDQUFDLENBQUE7QUFFRjtJQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxDQUFBO0lBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSx5QkFBeUIsQ0FBQyxDQUFBO0lBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUNuQixTQUFTLEVBQ1QsMkJBQTJCLEVBQzNCLEVBQUUsRUFDRixFQUFFLENBQ0gsQ0FBQTtJQUNELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxDQUFBO0lBQzVDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUNuQixRQUFRLEVBQ1Isb0JBQW9CLEVBQ3BCLEdBQUcsRUFDSCxHQUFHLENBQ0osQ0FBQTtJQUNELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxzQkFBc0IsQ0FBQyxDQUFBO0lBQ3BELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSx3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
